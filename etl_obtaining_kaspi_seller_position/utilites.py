import json
import random
import asyncio
import aiohttp

from itertools import cycle

from core import settings

import redis.asyncio as redis

redis_tasks = redis.Redis(
    host="185.100.67.246",
    port=6379,
    db=1,
    decode_responses=False,
)

redis_403 = redis.Redis(
    host="185.100.67.246",
    port=6379,
    db=2,
    decode_responses=False,
)

redis_result_db = redis.Redis(
    host="185.100.67.246",
    port=6379,
    db=3,
    decode_responses=False,
)


# –°–ø–∏—Å–æ–∫ FastAPI-–∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
FASTAPI_INSTANCES = [
    "http://f5cbc5d9cf3b5a9d24f7b0632bb0067f.serveo.net/v1/kaspi/etl/get_seller_position/",
    "http://a313006f8846cfdef9f59d094082db9a.serveo.net/v1/kaspi/etl/get_seller_position/",
    # "http://cupiditate.serveo.net/v1/kaspi/etl/get_seller_position/",
    # "https://fideiussorem.serveo.net/v1/kaspi/etl/get_seller_position/",
    # "http://127.0.0.1:7777/v1/kaspi/etl/get_seller_position/",
    # "http://127.0.0.1:7777/v1/kaspi/etl/get_seller_position/",
    # "http://127.0.0.1:7778/v1/kaspi/etl/get_seller_position/",
    # "https://cupiditate.serveo.net/v1/kaspi/etl/get_seller_position/",
    # "http://127.0.0.1:7779/v1/kaspi/etl/get_seller_position/",
    # "http://127.0.0.1:7780/v1/kaspi/etl/get_seller_position/",
]

# –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ (Round Robin)
instance_cycle = cycle(FASTAPI_INSTANCES)

USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
    "(KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 "
    "(KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
    "(KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36",
]


async def fetch_all(headers: dict, master_sku: str, city_ids: list):
    """–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –ø—Ä–∏ 403"""

    kaspi_url = settings.etl_sellers_pos.url.format(master_sku=master_sku)
    headers.setdefault("referer", kaspi_url)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    connector = aiohttp.TCPConnector(limit_per_host=10)
    timeout = aiohttp.ClientTimeout(total=30)
    semaphore = asyncio.Semaphore(5)

    async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
        offers_list = {}

        async def fetch(city_id):
            """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ 403."""
            payload = {
                "cityId": city_id,
                "id": master_sku,
                "merchantUID": "",
                "limit": 50,
                "page": 0,
                "sortOption": "PRICE",
                "highRating": None,
                "searchText": None,
                "zoneId": ["Magnum_ZONE5"],
                "installationId": "-1",
            }

            async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                try:
                    headers["User-Agent"] = random.choice(
                        USER_AGENTS
                    )  # –ú–µ–Ω—è–µ–º User-Agent
                    async with session.post(
                        kaspi_url, json=payload, headers=headers
                    ) as response:
                        if response.status == 200:
                            try:
                                data = await response.json()
                                offers_list[city_id] = data
                                print(
                                    f"‚úÖ {master_sku} –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_id}"
                                )
                                return
                            except aiohttp.ContentTypeError:
                                print(
                                    f"‚ùå –û—à–∏–±–∫–∞ JSON-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_id}"
                                )

                        elif response.status == 403:
                            print(
                                f"üö´ 403 Forbidden –¥–ª—è {city_id}, –∂–¥–µ–º 1.5 —Å–µ–∫ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º..."
                            )

                            # await asyncio.sleep(1.5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                            new_url = next(instance_cycle)  # –ù–æ–≤—ã–π FastAPI-–∏–Ω—Å—Ç–∞–Ω—Å

                            try:
                                async with session.post(
                                    new_url,
                                    json={
                                        "city_ids": [city_id],
                                        "master_sku": master_sku,
                                    },
                                    headers=headers,
                                ) as new_response:

                                    if new_response.status == 200:
                                        new_data = await new_response.json()
                                        offers_list[city_id] = new_data
                                        print(
                                            f"üîÄ {city_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞ {new_url}"
                                        )
                                    else:
                                        print(
                                            f"‚ö†Ô∏è {city_id} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—à–∏–±–∫–∞ {new_response.status} –Ω–∞ {new_url}"
                                        )

                            except aiohttp.ClientError as exc:
                                print(
                                    f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {city_id} –Ω–∞ {new_url}: {exc}"
                                )

                        else:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_id}")

                except aiohttp.ClientError as exc:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_id}: {exc}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(*[fetch(city_id) for city_id in city_ids])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Redis
    print("_____________FINAL_____________")
    # data_redis = json.dumps(offers_list)
    # await redis_client.set(master_sku, data_redis)
    return master_sku


# ++++++++++++++++++++++++++++++++++
import pickle


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI
INSTANCE_NAME = "FA1"  # –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ "FA2"
OTHER_INSTANCES = ["FA1", "FA2"]
OTHER_INSTANCES.remove(INSTANCE_NAME)
FASTAPI_403 = f"fastapi:403"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BASE_URL = "https://kaspi.kz/yml/offer-view/offers/{master_sku}"  # URL-—à–∞–±–ª–æ–Ω
HEADERS = {
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
    "Accept-Encoding": "gzip, deflate, br, zstd",
    "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36",
    "referer": "https://kaspi.kz/",
    "Content-Type": "application/json",
}


# –õ–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
processing_lock = asyncio.Lock()


async def fetch_data(session, city_id, master_sku):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å –∫ —Ä–µ—Å—É—Ä—Å—É."""
    url = BASE_URL.format(master_sku=master_sku)
    payload = {
        "cityId": city_id,
        "id": master_sku,
        "merchantUID": "",
        "limit": 50,
        "page": 0,
        "sortOption": "PRICE",
        "highRating": None,
        "searchText": None,
        "installationId": "-1",
    }

    try:
        async with session.post(url, json=payload, headers=HEADERS) as response:
            data = await response.text()
            status = response.status  # –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞

            if status == 200:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å ({city_id}): {data[:200]}")
                await redis_result_db.set(
                    f"{master_sku}:{city_id}",
                    data,  # –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    ex=3600,
                )

            elif status == 403:
                try:
                    print(f"‚ùå 403 Forbidden.")
                    instance = random.choice(
                        OTHER_INSTANCES
                    )  # –í—ã–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å fastapi
                    failed_task = {"city_ids": [city_id], "master_sku": master_sku}
                    existing_403_tasks_bytearray = await redis_403.get(instance)
                    existing_403_tasks = pickle.loads(existing_403_tasks_bytearray)

                    existing_403_tasks.append(
                        failed_task
                    )  # –¥–æ–±–∞–≤–∏–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
                    await redis_403.set(
                        instance, pickle.dumps(existing_403_tasks), ex=3600
                    )
                    print(f"üîÑ –ó–∞–¥–∞—á–∞ {master_sku} ({city_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {instance}")
                except Exception as e:
                    print(f"- e -> {e}")
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {status} ({city_id}): {data[:200]}")

            return data
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url} ({city_id}): {e}")
        return None


async def process_tasks(tasks):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏: –¥–µ–ª–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å—ã –ø–æ –∫–∞–∂–¥–æ–º—É city_id"""

    if isinstance(tasks, str):
        tasks = json.loads(tasks)

    print(f"- tasks -> {tasks} -> {type(tasks)}")

    async with aiohttp.ClientSession() as session:
        requests = []
        for task in tasks:
            master_sku = task.get("master_sku")
            city_ids = task.get("city_ids", [])

            for city_id in city_ids:
                requests.append(fetch_data(session, city_id, master_sku))

        results = await asyncio.gather(*requests)
        print(f"[{INSTANCE_NAME}] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(results)} –∑–∞–ø—Ä–æ—Å–æ–≤.")


async def check_redis():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç Redis –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á"""

    redis_key = f":1:fastapi:{INSTANCE_NAME}"  # —Ç–∞–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç Django

    while True:
        async with processing_lock:
            tasks_bytearray = await redis_tasks.get(redis_key)
            if tasks_bytearray:
                tasks = pickle.loads(tasks_bytearray)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º pickle
                print(f"- tasks > {tasks} -> {type(tasks)}")
                await process_tasks(tasks)
                await redis_tasks.set(redis_key, pickle.dumps([]))
            else:  # –∏–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                tasks_403_bytearra = await redis_403.get(INSTANCE_NAME)
                if tasks_403_bytearra:
                    tasks_403 = pickle.loads(tasks_403_bytearra)
                    print(f"- tasks_403 > {tasks_403} -> {type(tasks_403)}")
                    await process_tasks(tasks_403)
                    await redis_403.set(INSTANCE_NAME, pickle.dumps([]))
        # print("- DEBIUG PRINT check_redis END CYCLE -")


# async def check_redis(unic_key):
#     data = json.loads(await redis_client.get(unic_key))
#     return data

import json
import random
import asyncio
import aiohttp

from itertools import cycle

from core import settings

import redis.asyncio as redis

redis_client = redis.Redis(
    host="localhost",
    port=6379,
    db=2,
    decode_responses=True,
)


# –°–ø–∏—Å–æ–∫ FastAPI-–∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
FASTAPI_INSTANCES = [
    # "http://127.0.0.1:7777/v1/kaspi/etl/get_seller_position/",
    "http://127.0.0.1:7778/v1/kaspi/etl/get_seller_position/",
    "https://cupiditate.serveo.net/v1/kaspi/etl/get_seller_position/",
    # "http://127.0.0.1:7779/v1/kaspi/etl/get_seller_position/",
    # "http://127.0.0.1:7780/v1/kaspi/etl/get_seller_position/",
]

# –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ (Round Robin)
instance_cycle = cycle(FASTAPI_INSTANCES)

USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
    "(KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 "
    "(KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
    "(KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36",
]


async def fetch_all(headers: dict, master_sku: str, city_ids: list):
    """–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –ø—Ä–∏ 403"""

    kaspi_url = settings.etl_sellers_pos.url.format(master_sku=master_sku)
    headers.setdefault("referer", kaspi_url)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    connector = aiohttp.TCPConnector(limit_per_host=10)
    timeout = aiohttp.ClientTimeout(total=30)
    semaphore = asyncio.Semaphore(5)

    async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
        offers_list = {}

        async def fetch(city_id):
            """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ 403."""
            payload = {
                "cityId": city_id,
                "id": master_sku,
                "merchantUID": "",
                "limit": 50,
                "page": 0,
                "sortOption": "PRICE",
                "highRating": None,
                "searchText": None,
                "zoneId": ["Magnum_ZONE5"],
                "installationId": "-1",
            }

            async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                try:
                    headers["User-Agent"] = random.choice(
                        USER_AGENTS
                    )  # –ú–µ–Ω—è–µ–º User-Agent
                    async with session.post(
                        kaspi_url, json=payload, headers=headers
                    ) as response:
                        if response.status == 200:
                            try:
                                data = await response.json()
                                offers_list[city_id] = data
                                print(
                                    f"‚úÖ {master_sku} –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_id}"
                                )
                                return
                            except aiohttp.ContentTypeError:
                                print(
                                    f"‚ùå –û—à–∏–±–∫–∞ JSON-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_id}"
                                )

                        elif response.status == 403:
                            print(
                                f"üö´ 403 Forbidden –¥–ª—è {city_id}, –∂–¥–µ–º 1.5 —Å–µ–∫ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º..."
                            )

                            # await asyncio.sleep(1.5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                            new_url = next(instance_cycle)  # –ù–æ–≤—ã–π FastAPI-–∏–Ω—Å—Ç–∞–Ω—Å

                            try:
                                async with session.post(
                                    new_url,
                                    json={
                                        "city_ids": [city_id],
                                        "master_sku": master_sku,
                                    },
                                    headers=headers,
                                ) as new_response:

                                    if new_response.status == 200:
                                        new_data = await new_response.json()
                                        offers_list[city_id] = new_data
                                        print(
                                            f"üîÄ {city_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞ {new_url}"
                                        )
                                    else:
                                        print(
                                            f"‚ö†Ô∏è {city_id} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—à–∏–±–∫–∞ {new_response.status} –Ω–∞ {new_url}"
                                        )

                            except aiohttp.ClientError as exc:
                                print(
                                    f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {city_id} –Ω–∞ {new_url}: {exc}"
                                )

                        else:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_id}")

                except aiohttp.ClientError as exc:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_id}: {exc}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(*[fetch(city_id) for city_id in city_ids])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Redis
    print("_____________FINAL_____________")
    # data_redis = json.dumps(offers_list)
    # await redis_client.set(master_sku, data_redis)
    return master_sku


# ++++++++++++++++++++++++++++++++++


async def check_redis(unic_key):
    data = json.loads(await redis_client.get(unic_key))
    return data
